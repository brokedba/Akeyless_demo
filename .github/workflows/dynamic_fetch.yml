name: 'My_Akeyless_Workflow'
on:
  push:
    branches: [ "main" ]
    paths:
      - '.github/workflows/dynamic_fetch.yml'    

jobs:
  job_Akeyless_secrets:
    runs-on: ubuntu-latest
    environment: test-labs
    defaults:
      run:
        shell: bash
    #---------Required---------#
    permissions: 
      id-token: write
      contents: read
    #--------------------------#   
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3   
      # Akeyless Authentication and fetching secrets
      - name: Akeyless Authentication and fetching secrets
        id: fetch-secrets
        uses: akeyless-community/akeyless-github-action@v1.1.1
        with:
          access-id: ${{ secrets.AKEYLESS_ACCESS_ID }}
          access-type: jwt
          api-url: https://api.akeyless.io
          static-secrets: |
            - name: "/MyVault/DBs/OCI_RSA"
              output-name: "MY_RSA" 
          dynamic-secrets: |
            - name: "/MyVault/DBs/MySQLDynamicSecret"
              output-name: "MYSQL_DYNAMIC_SECRET"      
         # static-secrets: '{"/MyVault/DBs/OCI_RSA":"MY_RSA"}'   
         # dynamic-secrets:'{"/MyVault/DBs/MySQLDynamicSecret":"MYSQL_DYNAMIC_SECRET"}'
      
#      - name: Debug Fetched Secrets
#        run: |
#          echo "MY_RSA: ${{ steps.fetch-secrets.outputs.MY_RSA }}"
#          echo "MYSQL_DYNAMIC_SECRET: ${{ steps.fetch-secrets.outputs.MYSQL_DYNAMIC_SECRET }}"
# echo '${{ steps.fetch-secrets.outputs.MYSQL_DYNAMIC_SECRET }}' | jq -r 'to_entries|map("JWT_\(.key)=\(.value|tostring)")|.[]' >> $GITHUB_ENV               
      - name: Create PEM File & Export Dynamic Secret to Environment
      #  echo ${{ steps.fetch-secrets.outputs.MY_RSA }} | base64 -d >> rsa.pem   
        run: | 
          RAW_DYNAMIC_SECRET='${{ steps.fetch-secrets.outputs.MYSQL_DYNAMIC_SECRET }}'
          DYNAMIC_SECRET=$(echo "$RAW_DYNAMIC_SECRET" | sed 's/{/{"/g' | sed 's/:/":"/g' | sed 's/,/","/g' | sed 's/}/"}/g')
          echo "$DYNAMIC_SECRET" | jq -r 'to_entries|map("::add-mask::\(.value|tostring)")|.[]' | xargs -I {} echo {}
          USER=$(echo "$DYNAMIC_SECRET" | jq -r '.user')
          PASSWORD=$(echo "$DYNAMIC_SECRET" | jq -r '.password')
          echo "::add-mask::$USER"
          echo "::add-mask::$PASSWORD"
          echo "USER=$USER" >> $GITHUB_ENV
          echo "PASSWORD=$PASSWORD" >> $GITHUB_ENV

      # Mask the secrets to ensure they are not printed in logs
 #     - name: Mask Secrets
 #       run: |
 #         echo "::add-mask::${{ env.JWT_id }}"
 #         echo "::add-mask::${{ env.JWT_password }}" 
 #         echo "::add-mask::${{ vars.MYSQL_IP }}"  
      

      # Run MySQL Commands Remotely
      - name: Run MySQL Command
        run: |
          mysql -h ${{ vars.MYSQL_IP }} -P 3306 -u $USER -p$PASSWORD  -e 'USE mysql_db1; INSERT INTO DEPT (DEPTNO, DNAME, LOC) SELECT IFNULL(MAX(DEPTNO), 0) + 1, "DEVOPS", "LA" FROM DEPT;'


      #- name: SSH into Host and Update Database Table
      #  run: |
      #    echo -e '#!/bin/bash' >> department.sh
      #    echo -e "mysql -u\$LC_user -p\$LC_pass -e 'USE mysql_db1; INSERT INTO DEPT VALUES (40, \"DEVOPS\", \"LA\");'" >> department.sh
      #    export LC_user=${{ env.JWT_id }}
      #    export LC_pass=${{ env.JWT_password }}
      #    chmod 600 rsa.pem
      #    scp -o StrictHostKeyChecking=no -i "rsa.pem" department.sh ubuntu@${{ vars.MYSQL_IP }}:~/.
      #    ssh -o "SendEnv LC_*" -o StrictHostKeyChecking=no -i "rsa.pem" ubuntu@${{ vars.MYSQL_IP }} -t "bash department.sh"
      #    echo "Database mysql_db1 department table updated!"


          # ---------------------------------------------------------------------
          # True/False to denote if static/dynamic secrets should be exported as action outputs.       
          # Akeyless authentication token.
          # token: # optional
          # Akeyless Access Key
          # access-key: # optional
          # A YAML list representing rotated secrets to fetch.
          # rotated-secrets: # optional
          # A YAML list representing ssh certificates to fetch.
          # ssh-certificates: # optional
          # A YAML list representing pki certificates to fetch.
          # pki-certificates: # optional
          # GCP audience to use in signed JWT (relevant only for access-type=gcp)
          # gcp-audience: # optional, default is akeyless.io
          # Gateway URL for the K8S authenticated (relevant only for access-type=k8s)
          # gateway-url: # optional
          # The K8S Auth config name (relevant only for access-type=k8s)
          # k8s-auth-config-name: # optional
          # The CA certificate for the authentication to gateway
          # ca-certificate: # optional
          # A YAML list representing static secrets to fetch